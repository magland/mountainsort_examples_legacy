{
    "datasets": {
        "K15": {
            "files": {
                "firings_true.mda": {
                    "prv": {
                        "original_checksum": "5fb95bede27a48e679cef376e504e7125f60bd83",
                        "original_fcs": "head1000-5a26c085df3b5c8874c30b77a8609fa685fc10ea",
                        "original_path": "/home/magland/dev/fi_ss/analyses/synth/sims_for_neuron_paper/generate_datasets/../project/raw/firings_tet_K=15_1.mda",
                        "original_size": 265040,
                        "prv_version": "0.11"
                    }
                },
                "raw.mda": {
                    "prv": {
                        "original_checksum": "28f70121ccd04ac774f7a11dfab4ccce4bc8e0ea",
                        "original_fcs": "head1000-04eb39086a5aeec9ee56979a85cc12a9ff7b8a67",
                        "original_path": "/home/magland/dev/fi_ss/analyses/synth/sims_for_neuron_paper/generate_datasets/../project/raw/tet_K=15_1.mda",
                        "original_size": 257589652,
                        "prv_version": "0.11"
                    }
                },
                "waveforms_true.mda": {
                    "prv": {
                        "original_checksum": "d51d07845f5a1e5377e04c29b1ef7ba289844437",
                        "original_fcs": "head1000-f8abfa9477115a61b7b011d2f627a7120f22f120",
                        "original_path": "waveforms_true.mda",
                        "original_size": 2496024,
                        "prv_version": "0.11"
                    }
                }
            },
            "parameters": {
                "samplerate": 30000,
                "detect_sign": 1
            }
        },
        "K30": {
            "files": {
                "firings_true.mda": {
                    "prv": {
                        "original_checksum": "8617e632837223ef5f265587d5dc7809d1d49957",
                        "original_fcs": "head1000-e0318afda0817bc309ba14e54d744182524f15ff",
                        "original_path": "/home/magland/dev/fi_ss/analyses/synth/sims_for_neuron_paper/generate_datasets/../project/raw/firings_tet_K=30_1.mda",
                        "original_size": 602240,
                        "prv_version": "0.11"
                    }
                },
                "raw.mda": {
                    "prv": {
                        "original_checksum": "f917f9dfa1864aa9ebb72987d5f0a2f811d5e1a1",
                        "original_fcs": "head1000-8e16d93118ad0809b3c99740e0ad5176c8b0c7a8",
                        "original_path": "tet_K=30_1.mda",
                        "original_size": 257589652,
                        "prv_version": "0.11"
                    }
                },
                "waveforms_true.mda": {
                    "prv": {
                        "original_checksum": "f6e4705be20366cd9aec17cbf723f8184d334ffc",
                        "original_fcs": "head1000-463f4b79829679bd3ea56722a84fed32f671bf51",
                        "original_path": "waveforms_true.mda",
                        "original_size": 4992024,
                        "prv_version": "0.11"
                    }
                }
            },
            "parameters": {
                "samplerate": 30000,
                "detect_sign": 1
            }
        },
        "K60": {
            "files": {
                "firings_true.mda": {
                    "prv": {
                        "original_checksum": "fbb3f86381e7bf3b89fdd2526f423011c18cb46f",
                        "original_fcs": "head1000-27f7876577e747fa69983401170b93f92513d553",
                        "original_path": "/home/magland/dev/fi_ss/analyses/synth/sims_for_neuron_paper/generate_datasets/../project/raw/firings_tet_K=60_1.mda",
                        "original_size": 1235600,
                        "prv_version": "0.11"
                    }
                },
                "raw.mda": {
                    "prv": {
                        "original_checksum": "1f92719f9235d38351e92bdfce4e8f446b96f4d6",
                        "original_fcs": "head1000-08034ed2d06c3f82fd0f2627ffa3aef9da20b1a3",
                        "original_path": "/home/magland/dev/fi_ss/analyses/synth/sims_for_neuron_paper/generate_datasets/../project/raw/tet_K=60_1.mda",
                        "original_size": 257589652,
                        "prv_version": "0.11"
                    }
                },
                "waveforms_true.mda": {
                    "prv": {
                        "original_checksum": "fe64daff393314f38ad4063085e7480710c48564",
                        "original_fcs": "head1000-ba2ae5d9813e04ab35c0dc27599f12eed722f0c7",
                        "original_path": "waveforms_true.mda",
                        "original_size": 9984024,
                        "prv_version": "0.11"
                    }
                }
            },
            "parameters": {
                "samplerate": 30000,
                "detect_sign": 1
            }
        }
    },
    "pipelines": {
        "mountainsort3": {
            "processing_server": "typhoon",
            "pipelines": [
                {
                    "spec": {
                        "name": "test",
                        "description": "",
                        "inputs": [],
                        "outputs": [],
                        "parameters": []
                    },
                    "steps": [
                        {
                            "step_type": "pipeline",
                            "pipeline_name": "synthesize",
                            "inputs": {},
                            "outputs": {
                                "raw": "raw",
                                "geom": "geom",
                                "waveforms_true": "waveforms_true",
                                "firings_true": "firings_true"
                            },
                            "parameters": {
                                "duration": "600",
                                "samplerate": "30000"
                            }
                        },
                        {
                            "step_type": "pipeline",
                            "pipeline_name": "sort",
                            "inputs": {
                                "raw": "raw",
                                "geom": "geom"
                            },
                            "outputs": {
                                "firings_out": "firings",
                                "filt_out": "filt",
                                "pre_out": "pre",
                                "cluster_metrics_out": "cluster_metrics"
                            },
                            "parameters": {
                                "samplerate": "30000",
                                "detect_sign": "",
                                "curate": "true"
                            }
                        },
                        {
                            "step_type": "pipeline",
                            "pipeline_name": "curate",
                            "inputs": {
                                "pre": "pre",
                                "firings": "firings"
                            },
                            "outputs": {
                                "curated_firings": "curated_firings"
                            },
                            "parameters": {
                                "samplerate": "30000"
                            }
                        }
                    ],
                    "input_files": [],
                    "output_files": []
                },
                {
                    "spec": {
                        "name": "synthesize",
                        "description": "",
                        "inputs": [],
                        "outputs": [
                            {
                                "name": "raw"
                            },
                            {
                                "name": "geom"
                            },
                            {
                                "name": "waveforms_true"
                            },
                            {
                                "name": "firings_true"
                            }
                        ],
                        "parameters": [
                            {
                                "name": "duration",
                                "description": "Durations of simulated dataset in seconds"
                            },
                            {
                                "name": "samplerate"
                            }
                        ]
                    },
                    "steps": [
                        {
                            "step_type": "processor",
                            "processor_name": "pyms.synthesize_random_waveforms",
                            "inputs": {},
                            "outputs": {
                                "waveforms_out": "waveforms_true",
                                "geometry_out": "geom"
                            },
                            "parameters": {
                                "upsamplefac": "13"
                            }
                        },
                        {
                            "step_type": "processor",
                            "processor_name": "pyms.synthesize_random_firings",
                            "inputs": {},
                            "outputs": {
                                "firings_out": "firings_true"
                            },
                            "parameters": {
                                "samplerate": "${samplerate}",
                                "duration": "${duration}"
                            }
                        },
                        {
                            "step_type": "processor",
                            "processor_name": "pyms.synthesize_timeseries",
                            "inputs": {
                                "firings": "firings_true",
                                "waveforms": "waveforms_true"
                            },
                            "outputs": {
                                "timeseries_out": "raw"
                            },
                            "parameters": {
                                "duration": "${duration}",
                                "waveform_upsamplefac": "13"
                            }
                        },
                        {
                            "step_type": "processor",
                            "processor_name": "pyms.synthesize_random_firings",
                            "inputs": {},
                            "outputs": {
                                "firings_out": "test_firings",
                                "console_out": "test_cons"
                            },
                            "parameters": {
                                "duration": "310"
                            }
                        }
                    ],
                    "input_files": [],
                    "output_files": []
                },
                {
                    "name": "sort",
                    "script": "/* Define the spec */\ninputs_opt('raw','filt','pre','geom');\noutputs('firings_out');\noutputs_opt('filt_out','pre_out','firings_original_out');\noutputs_opt('cluster_metrics_out');\nparam('samplerate',30000);\nparam('freq_min',300);\nparam('freq_max',6000);\nparam('freq_wid',1000);\nparam('whiten','true');\nparam('detect_threshold',3);\nparam('detect_sign',0);\nparam('adjacency_radius',-1);\n\nparam('curate','false');\n      \n\n_Pipeline.run=function(X) {\n  var pp=X.parameters;\n  \n  var pre='pre';\n  if (!X.hasInput('pre')) {\n    \n    var filt='filt';\n    if (!X.hasInput('filt')) {\n      if (!X.hasInput('raw')) {\n        console.error('Missing input: raw, filt or pre');\n        return -1;\n      }\n      X.runProcess('ms3.bandpass_filter',\n                   {timeseries:'raw'},\n                   {timeseries_out:'filt_out'},\n                   {samplerate:pp.samplerate,freq_min:pp.freq_min,freq_max:pp.freq_max,freq_wid:pp.freq_wid}\n                  );\n      filt='filt_out';\n    }\n  \n  \n    if (pp.whiten=='true') {\n      X.runProcess('ms3.whiten',\n                   {timeseries:filt},\n                   {timeseries_out:'pre_out'},\n                   {}\n                  );\n    }\n    else {\n      X.runProcess('pyms.normalize_channels',\n                   {timeseries:'filt'},\n                   {timeseries_out:'pre_out'},\n                   {}\n                  );\n    }\n    pre='pre_out';\n  }\n  \n  \n  var curate=(pp.curate=='true');\n  var firings1='firings_out';\n  if (curate) firings1='firings_original_out';\n  \n  var p={\n    detect_threshold:pp.detect_threshold,\n    detect_sign:pp.detect_sign,\n    adjacency_radius:pp.adjacency_radius\n  };\n  var inputs={timeseries:pre};\n  if (X.hasInput('geom')) {\n    inputs.geom='geom';\n  }\n  X.runProcess('mountainsortalg.ms3',\n               inputs,\n               {firings_out:firings1},\n               p);\n  \n  if (curate) {\n    X.runPipeline('curate',\n               {pre:pre,firings:firings1},\n               {curated_firings:'firings_out',cluster_metrics:'cluster_metrics_out'},\n               {samplerate:pp.samplerate});\n  }\n               \n};\n\n/////////////////////////////////////////////////////////////////////\n\n\nfunction param(str,val) {\n      if (val===undefined) {\n        _Pipeline.spec.parameters.push({name:str});\n      }\n      else {\n        _Pipeline.spec.parameters.push({name:str,optional:true,default_value:val});\n      }\n}\n                \nfunction inputs(str1,str2,str3,str4) {\n  if (str1) _Pipeline.spec.inputs.push({name:str1});\n  if (str2) _Pipeline.spec.inputs.push({name:str2});\n  if (str3) _Pipeline.spec.inputs.push({name:str3});\n  if (str4) _Pipeline.spec.inputs.push({name:str4});\n}\n\nfunction inputs_opt(str1,str2,str3,str4) {\n  if (str1) _Pipeline.spec.inputs.push({name:str1,optional:true});\n  if (str2) _Pipeline.spec.inputs.push({name:str2,optional:true});\n  if (str3) _Pipeline.spec.inputs.push({name:str3,optional:true});\n  if (str4) _Pipeline.spec.inputs.push({name:str4,optional:true});\n}\n\nfunction outputs(str1,str2,str3,str4) {\n  if (str1) _Pipeline.spec.outputs.push({name:str1});\n  if (str2) _Pipeline.spec.outputs.push({name:str2});\n  if (str3) _Pipeline.spec.outputs.push({name:str3});\n  if (str4) _Pipeline.spec.outputs.push({name:str4});\n}\n\nfunction outputs_opt(str1,str2,str3,str4) {\n  if (str1) _Pipeline.spec.outputs.push({name:str1,optional:true});\n  if (str2) _Pipeline.spec.outputs.push({name:str2,optional:true});\n  if (str3) _Pipeline.spec.outputs.push({name:str3,optional:true});\n  if (str4) _Pipeline.spec.outputs.push({name:str4,optional:true});\n}",
                    "steps": [],
                    "spec": {
                        "name": "",
                        "description": "",
                        "inputs": [],
                        "outputs": [],
                        "parameters": []
                    },
                    "export": true
                },
                {
                    "spec": {
                        "name": "curate",
                        "description": "",
                        "inputs": [
                            {
                                "name": "pre"
                            },
                            {
                                "name": "firings"
                            }
                        ],
                        "outputs": [
                            {
                                "name": "curated_firings"
                            },
                            {
                                "name": "cluster_metrics"
                            }
                        ],
                        "parameters": [
                            {
                                "name": "samplerate"
                            }
                        ]
                    },
                    "steps": [
                        {
                            "step_type": "processor",
                            "processor_name": "ms3.cluster_metrics",
                            "inputs": {
                                "timeseries": "pre",
                                "firings": "firings"
                            },
                            "outputs": {
                                "cluster_metrics_out": "metrics1"
                            },
                            "parameters": {
                                "samplerate": "${samplerate}"
                            }
                        },
                        {
                            "step_type": "processor",
                            "processor_name": "ms3.isolation_metrics",
                            "inputs": {
                                "timeseries": "pre",
                                "firings": "firings"
                            },
                            "outputs": {
                                "metrics_out": "metrics2"
                            },
                            "parameters": {
                                "compute_bursting_parents": "true"
                            }
                        },
                        {
                            "step_type": "processor",
                            "processor_name": "ms3.combine_cluster_metrics",
                            "inputs": {
                                "metrics_list": [
                                    "metrics1",
                                    "metrics2"
                                ]
                            },
                            "outputs": {
                                "metrics_out": "cluster_metrics"
                            },
                            "parameters": {}
                        },
                        {
                            "step_type": "processor",
                            "processor_name": "pyms.create_label_map",
                            "inputs": {
                                "metrics": "cluster_metrics"
                            },
                            "outputs": {
                                "label_map_out": "label_map"
                            },
                            "parameters": {}
                        },
                        {
                            "step_type": "processor",
                            "processor_name": "pyms.apply_label_map",
                            "inputs": {
                                "firings": "firings",
                                "label_map": "label_map"
                            },
                            "outputs": {
                                "firings_out": "curated_firings"
                            },
                            "parameters": {}
                        }
                    ],
                    "input_files": [],
                    "output_files": []
                },
                {
                    "spec": {
                        "name": "compare_ground_truth",
                        "description": "",
                        "inputs": [
                            {
                                "name": "firings1"
                            },
                            {
                                "name": "firings2"
                            }
                        ],
                        "outputs": [
                            {
                                "name": "confusion_matrix_out"
                            },
                            {
                                "name": "accuracies_out"
                            }
                        ],
                        "parameters": []
                    },
                    "steps": [
                        {
                            "step_type": "processor",
                            "processor_name": "ms3.confusion_matrix",
                            "inputs": {
                                "firings1": "firings1",
                                "firings2": "firings2"
                            },
                            "outputs": {
                                "confusion_matrix_out": "confusion_matrix_out",
                                "firings2_relabeled_out": ""
                            },
                            "parameters": {
                                "relabel_firings2": "true"
                            }
                        },
                        {
                            "step_type": "processor",
                            "processor_name": "pyms.compute_accuracies",
                            "inputs": {
                                "confusion_matrix": "confusion_matrix_out"
                            },
                            "outputs": {
                                "output": "accuracies_out",
                                "console_out": ""
                            },
                            "parameters": {}
                        }
                    ],
                    "input_files": [],
                    "output_files": [],
                    "export": true
                }
            ],
            "input_files": [],
            "output_files": [],
            "jobs": []
        }
    },
    "batch_scripts": {
        "analysis1": {
            "script": "var study = _MLS.study;\nvar run_pipeline = _MLS.runPipeline;\nvar res = _MLS.getResultPath;\nvar prv = _MLS.computePrv;\nvar write_json = _MLS.writeJson;\n\nvar detect_threshold = 3;\n\nvar datasets = study.datasets;\nfor (var id in datasets) {\n    console.log('Processing dataset: ' + id);\n    process_dataset(datasets[id]);\n}\n\nfunction process_dataset(X) {\n    run_pipeline('mountainsort3', 'sort', {\n        raw: X.files['raw.mda']\n    }, {\n        firings_out: res(X, 'firings.mda'),\n        cluster_metrics_out: res(X, 'cluster_metrics.json')\n    }, {\n        samplerate: X.parameters['samplerate'] || undefined,\n        detect_sign: X.parameters['detect_sign'] || undefined,\n        adjacency_radius: X.parameters['adjacency_radius'] || undefined,\n        detect_threshold: detect_threshold,\n        curate: 'true'\n    });\n\n    var mv2 = {\n        samplerate: X.parameters['samplerate'],\n        firings: prv(res(X, 'firings.mda')),\n        timeseries: {\n            \"Raw Data\": {\n                \"name\": \"Raw Data\",\n                \"data\": prv(X.files['raw.mda'])\n            }\n        },\n        cluster_metrics: prv(res(X, 'cluster_metrics.json'))\n    };\n    write_json(mv2, res(X, 'output.mv2'));\n\n    run_pipeline('mountainsort3', 'compare_ground_truth', {\n            firings1: X.files['firings_true.mda'],\n            firings2:res(X, 'firings.mda')\n        }, {\n            confusion_matrix_out:res(X,'confusion_matrix.mda'),\n            accuracies_out:res(X,'accuracies.json')\n        }, {}\n    );\n}\n"
        }
    }
}